@{
    ViewData["Title"] = "Design Pattern Ödevi - Labirent Bulmaca Oyunu";
    var rows = (int)ViewBag.Rows;
    var cols = (int)ViewBag.Cols;
    var maze = ViewBag.Maze as Maze;
    var cellSize = 75;
    var wallThickness = 2;
    var imgWidth = cols * cellSize + wallThickness;
    var imgHeight = rows * cellSize + wallThickness;
}

<h1 class="title">LABİRENT ÖLÜMCÜL KAÇIŞ</h1>

<div class="container">
    <!-- 1. Sütun: BLOKLAR -->
    <div class="blocks-column">
        <div class="block">sağ</div>
        <div class="block">sol</div>
        <div class="block">yukarı</div>
        <div class="block">aşağı</div>
        <div class="block">canavarı öldür</div>
        <div class="block">anahtarı al</div>
        <div class="block">kapıyı aç</div>
    </div>

    <!-- 2. Sütun: KODLAMA ALANI -->
    <div class="coding-column">
        <div id="codingArea">
            <div style="text-align:center; color: #75daff; font-weight: bold; margin-bottom:15px; font-size: 18px; text-transform: uppercase; letter-spacing: 2px;">KOMUT ALANI</div>
        </div>
        <button id="runButton">Çalıştır 🚀</button>

        <div class="status" id="status">
            Glade'e hoş geldin. Griever'lara yakalanmadan kaç!
        </div>

    </div>
    <!-- 3. Sütun: MAZE -->
    <div class="maze-column">
        <div class="info-panel">
            <h3>Labirentten Kaçış Oyunu Temelleri</h3>
            <ul>
                <li>Canavarı öldür</li>
                <li>Anahtarı al</li>
                <li>Kapıyı aç</li>
            </ul>
            <p>Üçünü de tamamlayarak labirentten kaçmalısın.</p>
        </div>

        <!-- Yeni HUD -->
        <div class="hud" style="justify-content: center;">
            <form method="get" asp-action="Index" class="maze-form">
                <label for="rows">Satır:</label>
                <input type="number" name="rows" value="@rows" min="5" max="100" />
                <label for="cols">Sütun:</label>
                <input type="number" name="cols" value="@cols" min="5" max="100" />
                <button type="submit" class="btn">Yenile</button>
            </form>
        </div>

        <div class="maze-container" style="width:@(imgWidth)px; height:@(imgHeight + 20)px;">
            <div style="position: relative; width:@(imgWidth)px; height:@(imgHeight)px;">
                <img src='@Url.Action("MazeImage", new { rows, cols })'
                     width='@imgWidth' height='@imgHeight'
                     alt="Labirent" />
                <div class="scanner-line"></div>

                @for (int r = 0; r < maze.Rows; r++)
                {
                    for (int c = 0; c < maze.Columns; c++)
                    {
                        var cell = maze.Grid[r, c];
                        if (cell.GameObject is MazeGame.Models.GameObjects.Monster)
                        {
                            <img id="monster-r@(r)-c@(c)" src="~/images/monster1.png"
                                 alt="Canavar"
                                 style="position: absolute; top: @(r * cellSize)px; left: @(c * cellSize)px; width: @(cellSize)px; height: @(cellSize)px;" />
                        }

                        if (cell.GameObject is MazeGame.Models.GameObjects.Key)
                        {
                            <img id="key-r@(r)-c@(c)" src="~/images/key.png"
                                 alt="Anahtar"
                                 style="position: absolute; top: @(r * cellSize)px; left: @(c * cellSize)px; width: @(cellSize)px; height: @(cellSize)px;" />
                        }

                        if (cell.GameObject is MazeGame.Models.GameObjects.Door)
                        {
                            <img id="door-r@(r)-c@(c)" src="~/images/door.png"
                                 alt="Kapı"
                                 style="position: absolute; top: @(r * cellSize)px; left: @(c * cellSize)px; width: @(cellSize)px; height: @(cellSize)px;" />
                        }
                    }
                }

                <img src="~/images/character_main.png"
                     alt="Karakter"
                     style="position: absolute; top: 0px; left: 0px; width: @(cellSize)px; height: @(cellSize)px; transform: rotateY(180deg);" />

                <div class="death-overlay"></div>
            </div>
        </div>
    </div>
</div>

<!-- Başlangıç Modalı -->
<div class="modal" id="startModal">
    <div class="modal-content">
        <h2>LABİRENT ÖLÜMCÜL KAÇIŞ</h2>
        <p>Glade'de uyandın, hiçbir şey hatırlamıyorsun. Gece gelen Griever'lara dikkat ederek labirentten kaç.</p>
        <div class="code-block terminal-effect">Interpreter ve Visitor tasarım deseni başlatıldı... Denek Labirent Denemesi için hazır.</div>
        <p>Blokları sürükle, sıraya diz ve karakteri yönlendir. Griever'ı öldür, anahtarı al ve kapıdan çık.</p>
        <button class="btn" id="startBtn">Maze'e Gir</button>
    </div>
</div>

<!-- Oyun Kazanma Modalı -->
<div class="modal hidden" id="victoryModal">
    <div class="modal-content">
        <h2>Başardın!</h2>
        <p>Labirentten kaçmayı başardın ve testlerden sağ çıktın. Özgürlük seni bekliyor.</p>
        <div class="code-block terminal-effect">
            Subject demonstrates exceptional aptitude. Phase two ready.
        </div>
        <button class="btn" id="playAgainBtn">Tekrar Oyna</button>
    </div>
</div>

<!-- Oyun Kaybetme Modalı -->
<div class="modal hidden" id="gameOverModal">
    <div class="modal-content">
        <h2>Yakalandın!</h2>
        <p id="gameOverMessage">Griever'lar seni yakaladı. Testin sonlandı.</p>
        <div class="code-block terminal-effect">
            Subject terminated. Trial data collected.
        </div>
        <button class="btn" id="restartBtn">Tekrar Dene</button>
    </div>
</div>

<!-- Stil dosyası -->
<style>
    <link href='https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;700&display=swap' rel="stylesheet" >
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Orbitron', 'Courier New', monospace;
        background-color: #0a0a0a;
        background-image: url('https://cdnjs.cloudflare.com/ajax/libs/simple-icons/3.0.1/simple-icons.svg');
        background-blend-mode: overlay;
        background-size: cover;
        color: #75daff;
        overflow-x: hidden;
    }

    .title {
        text-align: center;
        margin: 20px 0;
        font-size: 2.5rem;
        text-transform: uppercase;
        letter-spacing: 5px;
        text-shadow: 0 0 10px #3694bb, 0 0 20px #3694bb;
        color: #75daff;
    }

    .container {
        display: flex;
        flex-direction: row;
        gap: 30px;
        align-items: flex-start;
        max-width: 1400px;
        margin: 0 auto; /* 💡 merkez hizalama */
        padding: 40px 20px;
    }

    /* BLOCKS COLUMN */
    .blocks-column {
        width: 220px;
    }

    .block {
        border: 2px solid #75daff;
        padding: 16px;
        margin-bottom: 18px;
        text-align: center;
        background: rgba(10, 20, 30, 0.8);
        cursor: pointer;
        border-radius: 8px;
        font-size: 18px;
        user-select: none;
        transition: box-shadow 0.2s, background 0.2s;
        color: #75daff;
    }

        .block:hover {
            box-shadow: 0 0 10px #75daff99;
            background: #122a36;
        }

    /* CODING AREA COLUMN */
    .coding-column {
        flex: 1;
        display: flex;
        flex-direction: column;
        align-items: stretch;
    }

    #codingArea {
        min-height: 650px;
        border: 2px solid #75daff;
        border-radius: 10px;
        padding: 18px;
        background: rgba(10, 20, 30, 0.7);
        margin-bottom: 15px;
    }

    #runButton {
        margin-top: 15px;
        padding: 12px 0;
        background: #1e6a8a;
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 20px;
        font-weight: bold;
        cursor: pointer;
        font-family: 'Orbitron', sans-serif;
        text-transform: uppercase;
        letter-spacing: 2px;
        transition: all 0.3s;
    }

        #runButton:hover {
            background: #0e536f;
            box-shadow: 0 0 15px #75daff;
        }

    /* MAZE COLUMN */
    .maze-column {
        min-width: 600px;
    }

    .maze-container {
        position: relative;
        border: 3px solid #1e6a8a;
        background-color: #111;
        margin: 20px 0;
        box-shadow: 0 0 20px rgba(117, 218, 255, 0.2);
        overflow: hidden;
        border-radius: 5px;
    }

    .hud {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
        font-size: 1.2rem;
        text-shadow: 0 0 5px #75daff;
    }

    .status {
        text-align: center;
        margin-top: 10px;
        min-height: 50px;
        padding: 10px;
        background-color: rgba(0, 0, 0, 0.6);
        border: 1px solid #75daff;
        font-family: 'Orbitron', sans-serif;
    }

    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 100;
    }

    .modal-content {
        background-color: #0a1520;
        padding: 30px;
        border: 2px solid #75daff;
        box-shadow: 0 0 20px #75daff;
        text-align: center;
        max-width: 500px;
    }

    .modal h2 {
        font-size: 2rem;
        margin-bottom: 20px;
        color: #fff;
        text-transform: uppercase;
        font-family: 'Orbitron', sans-serif;
        letter-spacing: 2px;
    }

    .modal p {
        margin-bottom: 20px;
        font-size: 1.2rem;
        line-height: 1.5;
    }

    .maze-form {
        display: flex;
        align-items: center;
        gap: 10px;
        justify-content: center;
        margin-top: 15px;
        margin-bottom: 20px;
        font-family: 'Orbitron', sans-serif;
    }

        .maze-form label {
            color: #75daff;
            font-size: 14px;
        }

        .maze-form input {
            width: 60px;
            padding: 5px;
            background-color: #0a1520;
            border: 1px solid #75daff;
            color: #75daff;
            border-radius: 4px;
            font-family: 'Orbitron', monospace;
        }

        .maze-form .btn {
            padding: 8px 16px;
            font-size: 14px;
        }


    .hidden {
        display: none;
    }

    .code-block {
        margin: 10px 0;
        padding: 10px;
        background-color: #0a1520;
        border: 1px solid #1e6a8a;
        border-left: 4px solid #75daff;
        overflow-x: auto;
        font-family: 'Courier New', monospace;
    }

    .terminal-effect::before {
        content: "> ";
        color: #75daff;
    }

    .death-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 0, 0, 0.2);
        display: none;
        z-index: 50;
    }

    .scanner-line {
        position: absolute;
        top: 0;
        left: 0;
        height: 2px;
        width: 100%;
        background-color: #75daff;
        box-shadow: 0 0 10px #75daff;
        animation: scan 4s linear infinite;
        opacity: 0.7;
        z-index: 20;
    }

    .info-panel {
        margin-bottom: 15px;
        background-color: rgba(10, 20, 30, 0.7);
        padding: 15px;
        border-radius: 8px;
        border: 1px solid #1e6a8a;
    }

        .info-panel h3 {
            text-align: center;
            margin-bottom: 10px;
            color: #75daff;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .info-panel p {
            text-align: center;
            margin-bottom: 10px;
        }

        .info-panel ul {
            list-style-type: none;
            margin-left: 20px;
        }

            .info-panel ul li {
                margin-bottom: 5px;
                position: relative;
            }

                .info-panel ul li:before {
                    content: ">";
                    position: absolute;
                    left: -15px;
                    color: #75daff;
                }

    .btn {
        background: #1e6a8a;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 8px;
        font-size: 18px;
        font-weight: bold;
        cursor: pointer;
        font-family: 'Orbitron', sans-serif;
        text-transform: uppercase;
        letter-spacing: 1px;
        transition: all 0.3s;
        margin-top: 10px;
    }

        .btn:hover {
            background: #0e536f;
            box-shadow: 0 0 15px #75daff;
        }
</style>

<script>
    // Razor'dan gelen değerleri en başta bir kere JS değişkeni olarak ata
    const cellSize = @cellSize;
    const maxX = @cols;
    const maxY = @rows;

    document.addEventListener("DOMContentLoaded", function () {
        // — Başlangıç Modalı —
        const startModal = document.getElementById("startModal");
        const startBtn = document.getElementById("startBtn");

        // Fix #1: Modal gösterimi için sessionstorage kullan (daha sürekli)
        const hasVisited = sessionStorage.getItem("hasVisitedMazeGame");

        if (!hasVisited) {
            startModal.classList.remove("hidden");
            sessionStorage.setItem("hasVisitedMazeGame", "true");
        } else {
            startModal.classList.add("hidden");
        }

        if (startBtn) {
            startBtn.addEventListener("click", () => {
                startModal.classList.add("hidden");
            });
        }

        // — Blok ekleme / çift tıkla silme —
        document.querySelectorAll('.block').forEach(block => {
            block.addEventListener('click', () => {
                const clone = block.cloneNode(true);
                clone.style.marginBottom = "8px";
                clone.addEventListener('dblclick', () => clone.remove());
                document.getElementById('codingArea').appendChild(clone);
            });
        });

        // Kod alanındaki kopyalar için de çift-tık sil
        document.getElementById('codingArea').addEventListener('dblclick', e => {
            if (e.target.classList.contains('block')) e.target.remove();
        });

        // — Oyun akışı —
        const runButton = document.getElementById('runButton');
        const statusDisplay = document.getElementById('status');

        runButton.addEventListener('click', () => {
            const blockElements = Array.from(document.querySelectorAll('#codingArea .block'));
            const blockTexts = blockElements.map(b => b.innerText.trim());

            // Bloklarımız yoksa uyarı ver
            if (blockElements.length === 0) {
                statusDisplay.textContent = "Komut alanına blok ekleyiniz!";
                return;
            }

            fetch('/Maze/RunBlocks', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ blocks: blockTexts })
            })
            .then(res => res.json())
            .then(data => {
                const character = document.querySelector('.maze-container img[alt="Karakter"]');
                let stepIndex = 0;
                let hasKey = false;
                let killedMonster = false;
                let hasEscaped = false;
                let allStepsCompleted = false;

                function updateStatus(message) {
                    statusDisplay.textContent = message;
                }

                // Fix #2: Sadece işlenen bloğu kaldır, diğerlerine dokuma
                function removeProcessedBlock(index) {
                    if (blockElements[index]) {
                        blockElements[index].remove();
                    }
                }

                function playStep() {
                    if (stepIndex >= data.length) {
                        allStepsCompleted = true;

                        // Fix #3: Adımlar bitti ama kaçmadık
                        if (!hasEscaped) {
                            // Sadece kapı komutunu kullanmadığı için oyun sonlanmadı
                            updateStatus("Tüm komutları tamamladın. Kapıyı açman gerekiyor!");
                        }
                        return;
                    }

                    const step = data[stepIndex];

                    // 1) Hareket
                    character.style.left = (step.x * cellSize) + 'px';
                    character.style.top = (step.y * cellSize) + 'px';

                    // 2) Yön
                    switch (step.direction.toLowerCase()) {
                        case "left": character.style.transform = "rotateY(0deg)"; break;
                        case "right": character.style.transform = "rotateY(180deg)"; break;
                        case "up": character.style.transform = "rotate(-90deg)"; break;
                        case "down": character.style.transform = "rotate(90deg)"; break;
                    }

                    // 3) Canavar öldürme işlemi
                    if (step.killedMonster) {
                        const m = document.getElementById(`monster-r${step.y}-c${step.x}`);
                        if (m) {
                            m.remove();
                            killedMonster = true;
                            updateStatus("Griever'ı öldürdün! Şimdi anahtarı bul.");
                        }
                    }

                    // 4) Anahtar alındı mı?
                    if (step.takeKey) {
                        const k = document.getElementById(`key-r${step.y}-c${step.x}`);
                        if (k) {
                            k.remove();
                            hasKey = true;
                            updateStatus("Anahtarı buldun! Şimdi kapıyı açabilirsin.");
                        }
                    }

                    // 5) Kapı açıldı mı?
                    // Fix #4: Kapı kontrolü için tüm gereklilikleri kontrol et
                    if (step.openedDoor) {
                        if (hasKey && killedMonster) {
                            hasEscaped = true;
                            updateStatus("Kapı açıldı! Labirentten kaçtın!");
                            document.getElementById('victoryModal').classList.remove('hidden');
                            return; // Kazandıysa animasyonu durdur
                        } else {
                            // Koşullar sağlanmadan kapıyı açamaz
                            let errorMessage = "Kapıyı açamadın! ";
                            if (!hasKey) errorMessage += "Anahtarı bulmalısın. ";
                            if (!killedMonster) errorMessage += "Griever'ı öldürmelisin.";

                            updateStatus(errorMessage);
                            document.getElementById('gameOverModal').classList.remove('hidden');
                            document.getElementById('gameOverMessage').textContent = errorMessage;
                            return; // Bu durumda da animasyonu durdur
                        }
                    }

                    // 6) Bu adımda çıkışa geldi isek uyarı
                    if (step.x === maxX-1 && step.y === maxY-1 && !hasEscaped) {
                        let warningMsg = "Kapı komutunu çalıştırmalısın! ";
                        if (!hasKey) warningMsg += "Anahtarı bulmalısın. ";
                        if (!killedMonster) warningMsg += "Griever'ı öldürmelisin.";

                        updateStatus(warningMsg);
                    }

                    // Her adımda sadece o adımı temsil eden bloğu sil
                    removeProcessedBlock(stepIndex);

                    // Sonraki adıma geç
                    stepIndex++;
                    setTimeout(playStep, 400);
                }

                playStep();
            });
        });

        // — Tekrar oynama butonları —
        document.getElementById("restartBtn")?.addEventListener("click", () => {
            document.getElementById("gameOverModal").classList.add("hidden");
            window.location.reload();
        });

        document.getElementById("playAgainBtn")?.addEventListener("click", () => {
            document.getElementById("victoryModal").classList.add("hidden");
            window.location.reload();
        });
    });
</script>