@{
    ViewData["Title"] = "Design Pattern Ödevi - Labirent Bulmaca Oyunu";
    var rows = (int)ViewBag.Rows;
    var cols = (int)ViewBag.Cols;
    var maze = ViewBag.Maze as Maze;
    var cellSize = 75;
    var wallThickness = 2;
    var imgWidth = cols * cellSize + wallThickness;
    var imgHeight = rows * cellSize + wallThickness;
}

<!-- Sayfa Layoutu: 3 Sütun -->
<div style="display: flex; flex-direction: row; gap: 30px; margin: 40px 10px 0 10px; align-items: flex-start;">

    <!-- 1. Sütun: BLOKLAR -->
    <div style="width: 220px;">
@*         <div class="block">if</div>
        <div class="block">loop</div> *@
        <div class="block">sağ</div>
        <div class="block">sol</div>
        <div class="block">yukarı</div>
        <div class="block">aşağı</div>
        <div class="block">vur</div>
        <div class="block">anahtarı al</div>
@*         <div class="block">arkadaşı kurtar</div>
        
        <div class="block">kapıyı aç</div> *@
    </div>

    <!-- 2. Sütun: KODLAMA ALANI -->
    <div style="flex: 1; display: flex; flex-direction: column; align-items: stretch;">
        <div id="codingArea" style="flex: 1; min-height: 650px; border: 2px solid red; border-radius: 10px; padding: 18px; background: #fff;">
            <div style="text-align:center; color: red; font-weight: bold; margin-bottom:15px;">KODLAMA ALANI</div>
            <!-- Kullanıcı blokları buraya tıklayarak ekler -->
        </div>
        <button id="runButton" style="margin-top: 15px; padding: 12px 0; background: #ff0000; color: white; border: none; border-radius: 8px; font-size: 20px; font-weight: bold; cursor: pointer;">
            Çalıştır 🚀
        </button>
    </div>

    <!-- 3. Sütun: MAZE -->
    <div id="mazePanel" style="min-width: @(imgWidth + 20)px;">
        <h3 style="text-align:center; margin-bottom: 10px;">Projede Kullanılan Design Patternler</h3>
        <ul>
            <li>Interpreter</li>
            <li>Visitor</li>
        </ul>
        <form method="get" asp-action="Index" style="margin-bottom: 15px;">
            <label>Satır:</label>
            <input type="number" name="rows" value="@rows" min="5" max="100" style="width:55px;" />
            <label> Sütun:</label>
            <input type="number" name="cols" value="@cols" min="5" max="100" style="width:55px;" />
            <button type="submit">Yenile</button>
        </form>
        <div style="position: relative; width:@(imgWidth)px; height:@(imgHeight)px; margin-top:20px;">
            <img src='@Url.Action("MazeImage", new { rows, cols })'
                 width='@imgWidth' height='@imgHeight'
                 alt="Labirent" />

            <!-- Monster -->
            @for (int r = 0; r < maze.Rows; r++)
            {
                for (int c = 0; c < maze.Columns; c++)
                {
                    var cell = maze.Grid[r, c];
                    if (cell.GameObject is MazeGame.Models.GameObjects.Monster)
                    {
                        <img id="monster-r@(r)-c@(c)" src="~/images/monster1.png"
                             alt="Canavar"
                             style="position: absolute;
                             top: @(r * cellSize)px;
                             left: @(c * cellSize)px;
                             width: @(cellSize)px;
                             height: @(cellSize)px;" />
                    }

                    if (cell.GameObject is MazeGame.Models.GameObjects.Key)
                    {
                        <img id="key-r@(r)-c@(c)" src="~/images/key.png"
                             alt="Anahtar"
                             style="position: absolute;
                             top: @(r * cellSize)px;
                             left: @(c * cellSize)px;
                             width: @(cellSize)px;
                             height: @(cellSize)px;" />
                    }
                }
            }

            <img src="~/images/character_main.png"
                 alt="Karakter"
                 style="
                    position: absolute;
                    top: 0px;
                    left: 0px;
                    width: @(cellSize)px;
                    height: @(cellSize)px;
                    transform: rotateY(180deg);
                " />
        </div>
    </div>
</div>

<!-- CSS Kodları -->
<style>
    .block {
        border: 2px solid red;
        padding: 16px;
        margin-bottom: 18px;
        text-align: center;
        background: white;
        cursor: pointer;
        border-radius: 8px;
        font-size: 18px;
        user-select: none;
        transition: box-shadow 0.2s, background 0.2s;
    }

        .block:hover {
            box-shadow: 0 0 10px #ff000099;
            background: #ffeaea;
        }

    #codingArea {
        min-height: 600px;
        border: 2px solid red;
        padding: 15px;
        border-radius: 10px;
        background: #fff;
    }

    #runButton:hover {
        background: #b90000;
    }
</style>

<!-- JS: Blok ekleme, çift tıkla silme, Çalıştır tuşu -->
<script>
    function removeMonsterAt(x, y) {
    const monsterId = `monster-r${y}-c${x}`; // dikkat: Grid[y,x] → r=y, c=x
    const monster = document.getElementById(monsterId);
    if (monster) {
        monster.remove();
        console.log(`👹 Monster removed from (${x}, ${y})`);
        }
    }

    function removeKeyAt(x, y) {
    const keyId = `key-r${y}-c${x}`; // dikkat: Grid[y,x] → r=y, c=x
    const key = document.getElementById(keyId);
    if (key) {
        key.remove();
        console.log(`👹 Key removed from (${x}, ${y})`);
        }
    }

    document.addEventListener("DOMContentLoaded", function () {
        // Blok ekleme
        document.querySelectorAll('.block').forEach(block => {
            block.addEventListener('click', function () {
                let clone = block.cloneNode(true);
                clone.style.marginBottom = "8px";
                clone.addEventListener('dblclick', function () {
                    clone.remove();
                });
                document.getElementById('codingArea').appendChild(clone);
            });
        });

        // Kodlama alanındaki bloklara da çift tıkla silme (refresh sonrası kalanlar için)
        document.getElementById('codingArea').addEventListener('dblclick', function (e) {
            if (e.target.classList.contains('block')) {
                e.target.remove();
            }
        });

        // Çalıştır butonu
        document.getElementById('runButton').addEventListener('click', function () {
            const blockElements = Array.from(document.querySelectorAll('#codingArea .block'));
            const blockTexts = blockElements.map(b => b.innerText.trim());

            console.log("Bloklar sırasıyla çalıştırılıyor:", blockTexts);

            fetch('/Maze/RunBlocks', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ blocks: blockTexts })
            })
            .then(res => res.json())
            .then(data => {
                console.log("Gelen adımlar:", data);

                const cellSize = @cellSize;
                const character = document.querySelector('#mazePanel img[alt="Karakter"]');
                let stepIndex = 0;

                function playStep() {
                    if (stepIndex >= data.length) return;

                    const step = data[stepIndex];

                    // Karakter pozisyonunu güncelle
                    character.style.left = (step.x * cellSize) + 'px';
                    character.style.top = (step.y * cellSize) + 'px';

                    // Karakter yönünü güncelle
                    switch (step.direction.toLowerCase()) {
                        case "left":
                            character.style.transform = "rotateY(0deg)";
                            break;
                        case "right":
                            character.style.transform = "rotateY(180deg)";
                            break;
                        case "up":
                            character.style.transform = "rotate(-90deg)";
                            break;
                        case "down":
                            character.style.transform = "rotate(90deg)";
                            break;
                    }

                        // 💥 Eğer canavar öldüyse, görselini DOM'dan da sil
                    if (step.killedMonster) {
                        removeMonsterAt(step.x, step.y);
                    }

                                            // 💥 Eğer canavar öldüyse, görselini DOM'dan da sil
                    if (step.takeKey) {
                        removeKeyAt(step.x, step.y);
                    }


                    // 💥 Bloku DOM'dan sil
                    if (blockElements[stepIndex]) {
                        blockElements[stepIndex].remove();
                    }

                    stepIndex++;
                    setTimeout(playStep, 400);
                }

                playStep(); // Animasyonu başlat
            });
        });
    });
</script>
